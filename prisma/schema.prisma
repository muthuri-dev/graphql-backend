generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgres"
  url      = env("SUPABASE_DATABASE_CONNECTING_STRING")
}

model User {
  id        String     @id @default(uuid())
  name      String
  email     String     @unique
  blogs     Blog[]
  followers Follower[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  Comment   Comment[]
}

model Follower {
  id        String   @id @default(uuid())
  follower  Int
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Blog {
  id        String    @id @default(uuid())
  title     String
  content   String    @db.Text
  imageUrl  String
  category  Category  @default(TECH)
  user      User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String?
  likes     Like[]
  tags      Tag[]
  comments  Comment[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

enum Category {
  TECH
  ANDROID
  AI_ML
  WEB
  JOBS
  STARTUPS
  UI_UX
  BOOKS
  DATABASES
}

model Like {
  id        String   @id @default(uuid())
  like      Int
  blog      Blog?    @relation(fields: [blogId], references: [id], onDelete: Cascade)
  blogId    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Tag {
  id        String   @id @default(uuid())
  tag       String
  blog      Blog?    @relation(fields: [blogId], references: [id], onDelete: Cascade)
  blogId    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Comment {
  id        String   @id @default(uuid())
  comment   String
  blog      Blog?    @relation(fields: [blogId], references: [id], onDelete: Cascade)
  blogId    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User?    @relation(fields: [userId], references: [id])
  userId    String?
}
